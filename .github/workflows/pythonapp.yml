# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Python App YAML

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]   
  
jobs:
  build:

    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest pytest-cov
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    - name: Test with pytest
      id: TestWithPytest
      run: |
           pytest -v --junitxml=report.xml
    - if: ${{failure()}}       
      name: Create Issues
      uses: nashmaniac/create-issue-action@v1.1
      with:
          title: Build Failed
          token: ${{secrets.GITHUB_TOKEN}}
          assignees: ${{github.actor}}
          labels: workflow-failed
          body: Workflow failed for commit ${{github.sha}} @ ${{github.ref}}
    
    - name: Build and Deploy
      uses: JacksonMaxfield/github-pages-deploy-action-python@2.1.0
      env:
        ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}
        BASE_BRANCH: master # The branch the action should deploy from.
        BRANCH: gh-pages # The branch the action should deploy to.
        FOLDER: docs/_build/html # The folder the action should deploy. This example folder is generated by Sphinx
        BUILD_SCRIPT: pip install .[all] && make docs-build && touch docs/_build/html/.nojekyll # The build script the action should run prior to deploying.
    - name: Upload Artifact
      uses: actions/upload-artifact@v2
      with:
        name: my-artifact
        path: path/to/artifact/
    - name: Download a Build Artifact
      uses: actions/download-artifact@v2
      with:
        name: my-artifact
        path: path/to/artifact\\
    

   
  #test game function

       
  build_test_image:
    title: "Building Test menu test case"
    type: "build"
    image_name: "test-menu-test-case"
    tag: "master"
    dockerfile: "Dockerfile.testing"
    stage: test
    run_integration_tests:
    title: "Running integration tests"
    stage: test
    image: '${{build_test_image}}'
    commands:

       

 
    -  name: Test new game settings
       run: |
           def new_game():
           game = init_game()
           game_control(game)
     
    -  name: Test game control
       run: |
            def game_control(game):
            game[STATE_INDEX]

         
    -  name: Test town menu
       run: |
           def town_menu_control(game):
           town_menu()
           option = get_option(len(TOWN_OPTIONS))
           TOWN_OPTIONS[option-1](game)

    - name: Test outdoor menu control
      run: | 
           def outdoor_menu_control(game):
           OUTDOOR_OPTIONS = [view_character, view_map, outdoor_move, exit_outdoor_game]
           outdoor_menu()
           option = get_option(len(OUTDOOR_OPTIONS))
           OUTDOOR_OPTIONS[option-1](game)           


    - name: Test combat 
      run: |
        def attack(min_damage,max_damage, defence):
          lose_hp = random.randint(min_damage,max_damage) - defence
          return lose_hp

    - name: Test flee function
      run: |
           def enemy_attack():
           lose_hp = random.randint(1,5)
           return lose_hp

   

       

   
